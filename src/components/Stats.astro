---
import { statsData } from '@/lib/constants';
---

<section class="py-20 bg-gray-100 dark:bg-gray-800 sm:py-16 lg:py-24">
  <div class="px-4 mx-auto sm:px-6 lg:px-8 max-w-7xl">
    <div class="max-w-2xl mx-auto text-center">
      <h2 class="text-3xl font-bold leading-tight text-gray-900 dark:text-white sm:text-4xl lg:text-5xl">
        Numbers tell our story
      </h2>
      <p class="mt-3 text-xl leading-relaxed text-gray-600 dark:text-gray-300 md:mt-8">
        Amet minim mollit non deserunt ullamco est sit aliqua dolor do amet sint. Velit officia consequat duis.
      </p>
    </div>

    <div class="grid grid-cols-1 gap-8 mt-10 text-center lg:mt-24 sm:gap-x-8 md:grid-cols-3">
      {statsData.map((stat, index) => (
        <div key={index}>
          <h3 class="font-bold text-7xl">
            <span
              class="stat-value text-transparent bg-clip-text bg-gradient-to-r from-fuchsia-600 to-blue-600"
              data-target={stat.value}
            >
              0
            </span>
            <span
              class="plus-sign text-transparent bg-clip-text bg-gradient-to-r from-fuchsia-600 to-blue-600 text-7xl"
            >
              +
            </span>
          </h3>
          <p class="mt-4 text-xl font-medium text-gray-900 dark:text-white">
            {stat.label}
          </p>
          <p class="text-base mt-0.5 text-gray-600 dark:text-gray-400">
            {stat.subtext}
          </p>
        </div>
      ))}
    </div>
  </div>
</section>

<script>
  if (typeof window !== 'undefined') {
    window.addEventListener('DOMContentLoaded', () => {
      const counters = document.querySelectorAll('.stat-value');

      const countUp = (element) => {
        const target = +element.getAttribute('data-target');
        let count = 0;
        const increment = target / 200;

        const interval = setInterval(() => {
          count += increment;
          if (count >= target) {
            count = target;
            clearInterval(interval);
          }
          element.innerText = Math.floor(count);
        }, 1);
      };

      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const element = entry.target;
            countUp(element);
            observer.unobserve(element);
          }
        });
      }, { threshold: 0.5 });

      counters.forEach(counter => {
        observer.observe(counter);
      });
    });
  }
</script>
